# automatically generated by the FlatBuffers compiler, do not modify

# namespace: State

import flatbuffers

class State(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsState(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State()
        x.Init(buf, n + offset)
        return x

    # State
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State
    def EnvironmentName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # State
    def FrameNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # State
    def Reward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # State
    def Terminated(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # State
    def TotalEnergySpent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # State
    def Observations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OBS import OBS
            obj = OBS()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # State
    def ObservationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # State
    def Unobservables(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Unobservables import Unobservables
            obj = Unobservables()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # State
    def EnvironmentDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .EnvironmentDescription import EnvironmentDescription
            obj = EnvironmentDescription()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # State
    def DebugMessage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

def StateStart(builder): builder.StartObject(9)
def StateAddEnvironmentName(builder, environmentName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(environmentName), 0)
def StateAddFrameNumber(builder, frameNumber): builder.PrependInt32Slot(1, frameNumber, 0)
def StateAddReward(builder, reward): builder.PrependFloat32Slot(2, reward, 0.0)
def StateAddTerminated(builder, terminated): builder.PrependBoolSlot(3, terminated, 0)
def StateAddTotalEnergySpent(builder, totalEnergySpent): builder.PrependFloat32Slot(4, totalEnergySpent, 0.0)
def StateAddObservations(builder, observations): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(observations), 0)
def StateStartObservationsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StateAddUnobservables(builder, unobservables): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(unobservables), 0)
def StateAddEnvironmentDescription(builder, environmentDescription): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(environmentDescription), 0)
def StateAddDebugMessage(builder, debugMessage): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(debugMessage), 0)
def StateEnd(builder): return builder.EndObject()
