# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBS

import flatbuffers

class Unobservables(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUnobservables(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Unobservables()
        x.Init(buf, n + offset)
        return x

    # Unobservables
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unobservables
    def Poses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 56
            from .QuaternionTransform import QuaternionTransform
            obj = QuaternionTransform()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Unobservables
    def PosesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Unobservables
    def Bodies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 48
            from .Body import Body
            obj = Body()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Unobservables
    def BodiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def UnobservablesStart(builder): builder.StartObject(2)
def UnobservablesAddPoses(builder, poses): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(poses), 0)
def UnobservablesStartPosesVector(builder, numElems): return builder.StartVector(56, numElems, 8)
def UnobservablesAddBodies(builder, bodies): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bodies), 0)
def UnobservablesStartBodiesVector(builder, numElems): return builder.StartVector(48, numElems, 8)
def UnobservablesEnd(builder): return builder.EndObject()
