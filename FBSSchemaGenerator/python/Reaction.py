# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Reaction

import flatbuffers

class Reaction(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsReaction(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Reaction()
        x.Init(buf, n + offset)
        return x

    # Reaction
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Reaction
    def EnvironmentName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # Reaction
    def Parameters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .ReactionParameters import ReactionParameters
            obj = ReactionParameters()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Reaction
    def Motions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Motion import Motion
            obj = Motion()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Reaction
    def MotionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Reaction
    def Unobservables(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Unobservables import Unobservables
            obj = Unobservables()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Reaction
    def Configurations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Configuration import Configuration
            obj = Configuration()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Reaction
    def ConfigurationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ReactionStart(builder): builder.StartObject(5)
def ReactionAddEnvironmentName(builder, environmentName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(environmentName), 0)
def ReactionAddParameters(builder, parameters): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(parameters), 0)
def ReactionAddMotions(builder, motions): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(motions), 0)
def ReactionStartMotionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ReactionAddUnobservables(builder, unobservables): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unobservables), 0)
def ReactionAddConfigurations(builder, configurations): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(configurations), 0)
def ReactionStartConfigurationsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ReactionEnd(builder): return builder.EndObject()
