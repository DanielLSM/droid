# automatically generated by the FlatBuffers compiler, do not modify

# namespace: State

import flatbuffers

class EnvironmentDescription(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEnvironmentDescription(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EnvironmentDescription()
        x.Init(buf, n + offset)
        return x

    # EnvironmentDescription
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EnvironmentDescription
    def MaxEpisodeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EnvironmentDescription
    def SolvedThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # EnvironmentDescription
    def ApiVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # EnvironmentDescription
    def SimulatorConfiguration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .SimulatorConfiguration import SimulatorConfiguration
            obj = SimulatorConfiguration()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EnvironmentDescription
    def Actors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Actor import Actor
            obj = Actor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EnvironmentDescription
    def ActorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EnvironmentDescription
    def Configurables(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Configurable import Configurable
            obj = Configurable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EnvironmentDescription
    def ConfigurablesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def EnvironmentDescriptionStart(builder): builder.StartObject(6)
def EnvironmentDescriptionAddMaxEpisodeLength(builder, maxEpisodeLength): builder.PrependInt32Slot(0, maxEpisodeLength, 0)
def EnvironmentDescriptionAddSolvedThreshold(builder, solvedThreshold): builder.PrependFloat32Slot(1, solvedThreshold, 0.0)
def EnvironmentDescriptionAddApiVersion(builder, apiVersion): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(apiVersion), 0)
def EnvironmentDescriptionAddSimulatorConfiguration(builder, simulatorConfiguration): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(simulatorConfiguration), 0)
def EnvironmentDescriptionAddActors(builder, actors): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(actors), 0)
def EnvironmentDescriptionStartActorsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EnvironmentDescriptionAddConfigurables(builder, configurables): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(configurables), 0)
def EnvironmentDescriptionStartConfigurablesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EnvironmentDescriptionEnd(builder): return builder.EndObject()
