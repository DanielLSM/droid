# automatically generated by the FlatBuffers compiler, do not modify

# namespace: State

import flatbuffers

class Actor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsActor(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Actor()
        x.Init(buf, n + offset)
        return x

    # Actor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Actor
    def ActorName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # Actor
    def Alive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # Actor
    def Motors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Motor import Motor
            obj = Motor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Actor
    def MotorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ActorStart(builder): builder.StartObject(3)
def ActorAddActorName(builder, actorName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(actorName), 0)
def ActorAddAlive(builder, alive): builder.PrependBoolSlot(1, alive, 0)
def ActorAddMotors(builder, motors): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(motors), 0)
def ActorStartMotorsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ActorEnd(builder): return builder.EndObject()
