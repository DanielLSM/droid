// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Neodroid.Messaging.Models.State
{

using global::System;
using global::FlatBuffers;

public enum FBSObserverData : byte
{
 NONE = 0,
 FBSByteArray = 1,
 FBSNumeral = 2,
 FBSString = 3,
 FBSPosition = 4,
 FBSRotation = 5,
 FBSEulerTransform = 6,
 FBSQuaternionTransform = 7,
 FBSBody = 8,
};

public enum FBSDataType : byte
{
 PNG = 0,
 JPEG = 1,
 Other = 2,
};

public struct FBSRange : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSRange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int DecimalGranularity { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public float MaxValue { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float MinValue { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<FBSRange> CreateFBSRange(FlatBufferBuilder builder, int DecimalGranularity, float MaxValue, float MinValue) {
    builder.Prep(4, 12);
    builder.PutFloat(MinValue);
    builder.PutFloat(MaxValue);
    builder.PutInt(DecimalGranularity);
    return new Offset<FBSRange>(builder.Offset);
  }
};

public struct FBSVector3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSVector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<FBSVector3> CreateFBSVector3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<FBSVector3>(builder.Offset);
  }
};

public struct FBSQuaternion : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSQuaternion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public float W { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }

  public static Offset<FBSQuaternion> CreateFBSQuaternion(FlatBufferBuilder builder, float X, float Y, float Z, float W) {
    builder.Prep(4, 16);
    builder.PutFloat(W);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<FBSQuaternion>(builder.Offset);
  }
};

public struct FBSState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSState GetRootAsFBSState(ByteBuffer _bb) { return GetRootAsFBSState(_bb, new FBSState()); }
  public static FBSState GetRootAsFBSState(ByteBuffer _bb, FBSState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool FBSStateBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "STAT"); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EnvironmentName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetEnvironmentNameBytes() { return __p.__vector_as_arraysegment(4); }
  public int FrameNumber { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Reward { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool Interrupted { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float TotalEnergySpent { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public FBSObserver? Observers(int j) { int o = __p.__offset(14); return o != 0 ? (FBSObserver?)(new FBSObserver()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ObserversLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FBSEnvironmentDescription? EnvironmentDescription { get { int o = __p.__offset(16); return o != 0 ? (FBSEnvironmentDescription?)(new FBSEnvironmentDescription()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string DebugMessage { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDebugMessageBytes() { return __p.__vector_as_arraysegment(18); }

  public static Offset<FBSState> CreateFBSState(FlatBufferBuilder builder,
      StringOffset environment_nameOffset = default(StringOffset),
      int frame_number = 0,
      float reward = 0.0f,
      bool interrupted = false,
      float total_energy_spent = 0.0f,
      VectorOffset observersOffset = default(VectorOffset),
      Offset<FBSEnvironmentDescription> environment_descriptionOffset = default(Offset<FBSEnvironmentDescription>),
      StringOffset debug_messageOffset = default(StringOffset)) {
    builder.StartObject(8);
    FBSState.AddDebugMessage(builder, debug_messageOffset);
    FBSState.AddEnvironmentDescription(builder, environment_descriptionOffset);
    FBSState.AddObservers(builder, observersOffset);
    FBSState.AddTotalEnergySpent(builder, total_energy_spent);
    FBSState.AddReward(builder, reward);
    FBSState.AddFrameNumber(builder, frame_number);
    FBSState.AddEnvironmentName(builder, environment_nameOffset);
    FBSState.AddInterrupted(builder, interrupted);
    return FBSState.EndFBSState(builder);
  }

  public static void StartFBSState(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddEnvironmentName(FlatBufferBuilder builder, StringOffset environmentNameOffset) { builder.AddOffset(0, environmentNameOffset.Value, 0); }
  public static void AddFrameNumber(FlatBufferBuilder builder, int frameNumber) { builder.AddInt(1, frameNumber, 0); }
  public static void AddReward(FlatBufferBuilder builder, float reward) { builder.AddFloat(2, reward, 0.0f); }
  public static void AddInterrupted(FlatBufferBuilder builder, bool interrupted) { builder.AddBool(3, interrupted, false); }
  public static void AddTotalEnergySpent(FlatBufferBuilder builder, float totalEnergySpent) { builder.AddFloat(4, totalEnergySpent, 0.0f); }
  public static void AddObservers(FlatBufferBuilder builder, VectorOffset observersOffset) { builder.AddOffset(5, observersOffset.Value, 0); }
  public static VectorOffset CreateObserversVector(FlatBufferBuilder builder, Offset<FBSObserver>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartObserversVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnvironmentDescription(FlatBufferBuilder builder, Offset<FBSEnvironmentDescription> environmentDescriptionOffset) { builder.AddOffset(6, environmentDescriptionOffset.Value, 0); }
  public static void AddDebugMessage(FlatBufferBuilder builder, StringOffset debugMessageOffset) { builder.AddOffset(7, debugMessageOffset.Value, 0); }
  public static Offset<FBSState> EndFBSState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSState>(o);
  }
  public static void FinishFBSStateBuffer(FlatBufferBuilder builder, Offset<FBSState> offset) { builder.Finish(offset.Value, "STAT"); }
};

public struct FBSEnvironmentDescription : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSEnvironmentDescription GetRootAsFBSEnvironmentDescription(ByteBuffer _bb) { return GetRootAsFBSEnvironmentDescription(_bb, new FBSEnvironmentDescription()); }
  public static FBSEnvironmentDescription GetRootAsFBSEnvironmentDescription(ByteBuffer _bb, FBSEnvironmentDescription obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSEnvironmentDescription __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MaxEpisodeLength { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float SolvedThreshold { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public FBSActor? Actors(int j) { int o = __p.__offset(8); return o != 0 ? (FBSActor?)(new FBSActor()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ActorsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FBSConfigurable? Configurables(int j) { int o = __p.__offset(10); return o != 0 ? (FBSConfigurable?)(new FBSConfigurable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConfigurablesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FBSEnvironmentDescription> CreateFBSEnvironmentDescription(FlatBufferBuilder builder,
      int max_episode_length = 0,
      float solved_threshold = 0.0f,
      VectorOffset actorsOffset = default(VectorOffset),
      VectorOffset configurablesOffset = default(VectorOffset)) {
    builder.StartObject(4);
    FBSEnvironmentDescription.AddConfigurables(builder, configurablesOffset);
    FBSEnvironmentDescription.AddActors(builder, actorsOffset);
    FBSEnvironmentDescription.AddSolvedThreshold(builder, solved_threshold);
    FBSEnvironmentDescription.AddMaxEpisodeLength(builder, max_episode_length);
    return FBSEnvironmentDescription.EndFBSEnvironmentDescription(builder);
  }

  public static void StartFBSEnvironmentDescription(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddMaxEpisodeLength(FlatBufferBuilder builder, int maxEpisodeLength) { builder.AddInt(0, maxEpisodeLength, 0); }
  public static void AddSolvedThreshold(FlatBufferBuilder builder, float solvedThreshold) { builder.AddFloat(1, solvedThreshold, 0.0f); }
  public static void AddActors(FlatBufferBuilder builder, VectorOffset actorsOffset) { builder.AddOffset(2, actorsOffset.Value, 0); }
  public static VectorOffset CreateActorsVector(FlatBufferBuilder builder, Offset<FBSActor>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartActorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConfigurables(FlatBufferBuilder builder, VectorOffset configurablesOffset) { builder.AddOffset(3, configurablesOffset.Value, 0); }
  public static VectorOffset CreateConfigurablesVector(FlatBufferBuilder builder, Offset<FBSConfigurable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartConfigurablesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FBSEnvironmentDescription> EndFBSEnvironmentDescription(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSEnvironmentDescription>(o);
  }
};

public struct FBSConfigurable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSConfigurable GetRootAsFBSConfigurable(ByteBuffer _bb) { return GetRootAsFBSConfigurable(_bb, new FBSConfigurable()); }
  public static FBSConfigurable GetRootAsFBSConfigurable(ByteBuffer _bb, FBSConfigurable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSConfigurable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ConfigurableName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetConfigurableNameBytes() { return __p.__vector_as_arraysegment(4); }
  public bool HasObserver { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ObserverName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetObserverNameBytes() { return __p.__vector_as_arraysegment(8); }
  public FBSRange? ValidInput { get { int o = __p.__offset(10); return o != 0 ? (FBSRange?)(new FBSRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartFBSConfigurable(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddConfigurableName(FlatBufferBuilder builder, StringOffset configurableNameOffset) { builder.AddOffset(0, configurableNameOffset.Value, 0); }
  public static void AddHasObserver(FlatBufferBuilder builder, bool hasObserver) { builder.AddBool(1, hasObserver, false); }
  public static void AddObserverName(FlatBufferBuilder builder, StringOffset observerNameOffset) { builder.AddOffset(2, observerNameOffset.Value, 0); }
  public static void AddValidInput(FlatBufferBuilder builder, Offset<FBSRange> validInputOffset) { builder.AddStruct(3, validInputOffset.Value, 0); }
  public static Offset<FBSConfigurable> EndFBSConfigurable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSConfigurable>(o);
  }
};

public struct FBSActor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSActor GetRootAsFBSActor(ByteBuffer _bb) { return GetRootAsFBSActor(_bb, new FBSActor()); }
  public static FBSActor GetRootAsFBSActor(ByteBuffer _bb, FBSActor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSActor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ActorName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetActorNameBytes() { return __p.__vector_as_arraysegment(4); }
  public FBSMotor? Motors(int j) { int o = __p.__offset(6); return o != 0 ? (FBSMotor?)(new FBSMotor()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MotorsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FBSActor> CreateFBSActor(FlatBufferBuilder builder,
      StringOffset actor_nameOffset = default(StringOffset),
      VectorOffset motorsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    FBSActor.AddMotors(builder, motorsOffset);
    FBSActor.AddActorName(builder, actor_nameOffset);
    return FBSActor.EndFBSActor(builder);
  }

  public static void StartFBSActor(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddActorName(FlatBufferBuilder builder, StringOffset actorNameOffset) { builder.AddOffset(0, actorNameOffset.Value, 0); }
  public static void AddMotors(FlatBufferBuilder builder, VectorOffset motorsOffset) { builder.AddOffset(1, motorsOffset.Value, 0); }
  public static VectorOffset CreateMotorsVector(FlatBufferBuilder builder, Offset<FBSMotor>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMotorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FBSActor> EndFBSActor(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSActor>(o);
  }
};

public struct FBSMotor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSMotor GetRootAsFBSMotor(ByteBuffer _bb) { return GetRootAsFBSMotor(_bb, new FBSMotor()); }
  public static FBSMotor GetRootAsFBSMotor(ByteBuffer _bb, FBSMotor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSMotor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string MotorName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetMotorNameBytes() { return __p.__vector_as_arraysegment(4); }
  public FBSRange? ValidInput { get { int o = __p.__offset(6); return o != 0 ? (FBSRange?)(new FBSRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float EnergySpentSinceReset { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static void StartFBSMotor(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddMotorName(FlatBufferBuilder builder, StringOffset motorNameOffset) { builder.AddOffset(0, motorNameOffset.Value, 0); }
  public static void AddValidInput(FlatBufferBuilder builder, Offset<FBSRange> validInputOffset) { builder.AddStruct(1, validInputOffset.Value, 0); }
  public static void AddEnergySpentSinceReset(FlatBufferBuilder builder, float energySpentSinceReset) { builder.AddFloat(2, energySpentSinceReset, 0.0f); }
  public static Offset<FBSMotor> EndFBSMotor(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSMotor>(o);
  }
};

public struct FBSPosition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSPosition GetRootAsFBSPosition(ByteBuffer _bb) { return GetRootAsFBSPosition(_bb, new FBSPosition()); }
  public static FBSPosition GetRootAsFBSPosition(ByteBuffer _bb, FBSPosition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSPosition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FBSVector3? Position { get { int o = __p.__offset(4); return o != 0 ? (FBSVector3?)(new FBSVector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartFBSPosition(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<FBSVector3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static Offset<FBSPosition> EndFBSPosition(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSPosition>(o);
  }
};

public struct FBSRotation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSRotation GetRootAsFBSRotation(ByteBuffer _bb) { return GetRootAsFBSRotation(_bb, new FBSRotation()); }
  public static FBSRotation GetRootAsFBSRotation(ByteBuffer _bb, FBSRotation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSRotation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FBSVector3? Rotation { get { int o = __p.__offset(4); return o != 0 ? (FBSVector3?)(new FBSVector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartFBSRotation(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<FBSVector3> rotationOffset) { builder.AddStruct(0, rotationOffset.Value, 0); }
  public static Offset<FBSRotation> EndFBSRotation(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSRotation>(o);
  }
};

public struct FBSEulerTransform : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSEulerTransform GetRootAsFBSEulerTransform(ByteBuffer _bb) { return GetRootAsFBSEulerTransform(_bb, new FBSEulerTransform()); }
  public static FBSEulerTransform GetRootAsFBSEulerTransform(ByteBuffer _bb, FBSEulerTransform obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSEulerTransform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FBSVector3? Position { get { int o = __p.__offset(4); return o != 0 ? (FBSVector3?)(new FBSVector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public FBSVector3? Rotation { get { int o = __p.__offset(6); return o != 0 ? (FBSVector3?)(new FBSVector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public FBSVector3? Direction { get { int o = __p.__offset(8); return o != 0 ? (FBSVector3?)(new FBSVector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartFBSEulerTransform(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<FBSVector3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<FBSVector3> rotationOffset) { builder.AddStruct(1, rotationOffset.Value, 0); }
  public static void AddDirection(FlatBufferBuilder builder, Offset<FBSVector3> directionOffset) { builder.AddStruct(2, directionOffset.Value, 0); }
  public static Offset<FBSEulerTransform> EndFBSEulerTransform(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSEulerTransform>(o);
  }
};

public struct FBSQuaternionTransform : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSQuaternionTransform GetRootAsFBSQuaternionTransform(ByteBuffer _bb) { return GetRootAsFBSQuaternionTransform(_bb, new FBSQuaternionTransform()); }
  public static FBSQuaternionTransform GetRootAsFBSQuaternionTransform(ByteBuffer _bb, FBSQuaternionTransform obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSQuaternionTransform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FBSVector3? Position { get { int o = __p.__offset(4); return o != 0 ? (FBSVector3?)(new FBSVector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public FBSQuaternion? Rotation { get { int o = __p.__offset(6); return o != 0 ? (FBSQuaternion?)(new FBSQuaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartFBSQuaternionTransform(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<FBSVector3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<FBSQuaternion> rotationOffset) { builder.AddStruct(1, rotationOffset.Value, 0); }
  public static Offset<FBSQuaternionTransform> EndFBSQuaternionTransform(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSQuaternionTransform>(o);
  }
};

public struct FBSBody : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSBody GetRootAsFBSBody(ByteBuffer _bb) { return GetRootAsFBSBody(_bb, new FBSBody()); }
  public static FBSBody GetRootAsFBSBody(ByteBuffer _bb, FBSBody obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSBody __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FBSVector3? Velocity { get { int o = __p.__offset(4); return o != 0 ? (FBSVector3?)(new FBSVector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public FBSVector3? AngularVelocity { get { int o = __p.__offset(6); return o != 0 ? (FBSVector3?)(new FBSVector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartFBSBody(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddVelocity(FlatBufferBuilder builder, Offset<FBSVector3> velocityOffset) { builder.AddStruct(0, velocityOffset.Value, 0); }
  public static void AddAngularVelocity(FlatBufferBuilder builder, Offset<FBSVector3> angularVelocityOffset) { builder.AddStruct(1, angularVelocityOffset.Value, 0); }
  public static Offset<FBSBody> EndFBSBody(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSBody>(o);
  }
};

public struct FBSByteArray : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSByteArray GetRootAsFBSByteArray(ByteBuffer _bb) { return GetRootAsFBSByteArray(_bb, new FBSByteArray()); }
  public static FBSByteArray GetRootAsFBSByteArray(ByteBuffer _bb, FBSByteArray obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSByteArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte ByteArray(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ByteArrayLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetByteArrayBytes() { return __p.__vector_as_arraysegment(4); }
  public FBSDataType DataType { get { int o = __p.__offset(6); return o != 0 ? (FBSDataType)__p.bb.Get(o + __p.bb_pos) : FBSDataType.PNG; } }

  public static Offset<FBSByteArray> CreateFBSByteArray(FlatBufferBuilder builder,
      VectorOffset byte_arrayOffset = default(VectorOffset),
      FBSDataType data_type = FBSDataType.PNG) {
    builder.StartObject(2);
    FBSByteArray.AddByteArray(builder, byte_arrayOffset);
    FBSByteArray.AddDataType(builder, data_type);
    return FBSByteArray.EndFBSByteArray(builder);
  }

  public static void StartFBSByteArray(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddByteArray(FlatBufferBuilder builder, VectorOffset byteArrayOffset) { builder.AddOffset(0, byteArrayOffset.Value, 0); }
  public static VectorOffset CreateByteArrayVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static void StartByteArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddDataType(FlatBufferBuilder builder, FBSDataType dataType) { builder.AddByte(1, (byte)dataType, 0); }
  public static Offset<FBSByteArray> EndFBSByteArray(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSByteArray>(o);
  }
};

public struct FBSNumeral : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSNumeral GetRootAsFBSNumeral(ByteBuffer _bb) { return GetRootAsFBSNumeral(_bb, new FBSNumeral()); }
  public static FBSNumeral GetRootAsFBSNumeral(ByteBuffer _bb, FBSNumeral obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSNumeral __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<FBSNumeral> CreateFBSNumeral(FlatBufferBuilder builder,
      float value = 0.0f) {
    builder.StartObject(1);
    FBSNumeral.AddValue(builder, value);
    return FBSNumeral.EndFBSNumeral(builder);
  }

  public static void StartFBSNumeral(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(0, value, 0.0f); }
  public static Offset<FBSNumeral> EndFBSNumeral(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSNumeral>(o);
  }
};

public struct FBSString : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSString GetRootAsFBSString(ByteBuffer _bb) { return GetRootAsFBSString(_bb, new FBSString()); }
  public static FBSString GetRootAsFBSString(ByteBuffer _bb, FBSString obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSString __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Value { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<FBSString> CreateFBSString(FlatBufferBuilder builder,
      StringOffset valueOffset = default(StringOffset)) {
    builder.StartObject(1);
    FBSString.AddValue(builder, valueOffset);
    return FBSString.EndFBSString(builder);
  }

  public static void StartFBSString(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddValue(FlatBufferBuilder builder, StringOffset valueOffset) { builder.AddOffset(0, valueOffset.Value, 0); }
  public static Offset<FBSString> EndFBSString(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSString>(o);
  }
};

public struct FBSObserver : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSObserver GetRootAsFBSObserver(ByteBuffer _bb) { return GetRootAsFBSObserver(_bb, new FBSObserver()); }
  public static FBSObserver GetRootAsFBSObserver(ByteBuffer _bb, FBSObserver obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSObserver __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ObserverName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetObserverNameBytes() { return __p.__vector_as_arraysegment(4); }
  public FBSObserverData DataType { get { int o = __p.__offset(6); return o != 0 ? (FBSObserverData)__p.bb.Get(o + __p.bb_pos) : FBSObserverData.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }
  public bool IsConfigurable { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FBSObserver> CreateFBSObserver(FlatBufferBuilder builder,
      StringOffset observer_nameOffset = default(StringOffset),
      FBSObserverData data_type = FBSObserverData.NONE,
      int dataOffset = 0,
      bool is_configurable = false) {
    builder.StartObject(4);
    FBSObserver.AddData(builder, dataOffset);
    FBSObserver.AddObserverName(builder, observer_nameOffset);
    FBSObserver.AddIsConfigurable(builder, is_configurable);
    FBSObserver.AddDataType(builder, data_type);
    return FBSObserver.EndFBSObserver(builder);
  }

  public static void StartFBSObserver(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddObserverName(FlatBufferBuilder builder, StringOffset observerNameOffset) { builder.AddOffset(0, observerNameOffset.Value, 0); }
  public static void AddDataType(FlatBufferBuilder builder, FBSObserverData dataType) { builder.AddByte(1, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(2, dataOffset, 0); }
  public static void AddIsConfigurable(FlatBufferBuilder builder, bool isConfigurable) { builder.AddBool(3, isConfigurable, false); }
  public static Offset<FBSObserver> EndFBSObserver(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSObserver>(o);
  }
};


}
