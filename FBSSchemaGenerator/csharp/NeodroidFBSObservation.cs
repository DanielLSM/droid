// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Neodroid.FBS.State
{

using global::System;
using global::FlatBuffers;

public enum Observation : byte
{
 NONE = 0,
 Single = 1,
 Triple = 2,
 Array = 3,
 RB = 4,
 ET = 5,
 QT = 6,
 String = 7,
 ByteArray = 8,
};

public enum ByteDataType : byte
{
 PNG = 0,
 JPEG = 1,
 Other = 2,
};

public struct Single : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Single GetRootAsSingle(ByteBuffer _bb) { return GetRootAsSingle(_bb, new Single()); }
  public static Single GetRootAsSingle(ByteBuffer _bb, Single obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Single __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public Neodroid.FBS.Range? Range { get { int o = __p.__offset(6); return o != 0 ? (Neodroid.FBS.Range?)(new Neodroid.FBS.Range()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartSingle(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddValue(FlatBufferBuilder builder, double value) { builder.AddDouble(0, value, 0.0); }
  public static void AddRange(FlatBufferBuilder builder, Offset<Neodroid.FBS.Range> rangeOffset) { builder.AddStruct(1, rangeOffset.Value, 0); }
  public static Offset<Single> EndSingle(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Single>(o);
  }
};

public struct Triple : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Triple GetRootAsTriple(ByteBuffer _bb) { return GetRootAsTriple(_bb, new Triple()); }
  public static Triple GetRootAsTriple(ByteBuffer _bb, Triple obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Triple __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Neodroid.FBS.Vector3? Triple { get { int o = __p.__offset(4); return o != 0 ? (Neodroid.FBS.Vector3?)(new Neodroid.FBS.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Neodroid.FBS.Range? XRange { get { int o = __p.__offset(6); return o != 0 ? (Neodroid.FBS.Range?)(new Neodroid.FBS.Range()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Neodroid.FBS.Range? YRange { get { int o = __p.__offset(8); return o != 0 ? (Neodroid.FBS.Range?)(new Neodroid.FBS.Range()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Neodroid.FBS.Range? ZRange { get { int o = __p.__offset(10); return o != 0 ? (Neodroid.FBS.Range?)(new Neodroid.FBS.Range()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartTriple(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddTriple(FlatBufferBuilder builder, Offset<Neodroid.FBS.Vector3> tripleOffset) { builder.AddStruct(0, tripleOffset.Value, 0); }
  public static void AddXRange(FlatBufferBuilder builder, Offset<Neodroid.FBS.Range> xRangeOffset) { builder.AddStruct(1, xRangeOffset.Value, 0); }
  public static void AddYRange(FlatBufferBuilder builder, Offset<Neodroid.FBS.Range> yRangeOffset) { builder.AddStruct(2, yRangeOffset.Value, 0); }
  public static void AddZRange(FlatBufferBuilder builder, Offset<Neodroid.FBS.Range> zRangeOffset) { builder.AddStruct(3, zRangeOffset.Value, 0); }
  public static Offset<Triple> EndTriple(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // triple
    return new Offset<Triple>(o);
  }
};

public struct Array : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Array GetRootAsArray(ByteBuffer _bb) { return GetRootAsArray(_bb, new Array()); }
  public static Array GetRootAsArray(ByteBuffer _bb, Array obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Array __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Array(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int ArrayLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetArrayBytes() { return __p.__vector_as_arraysegment(4); }
  public Neodroid.FBS.Range? Ranges(int j) { int o = __p.__offset(6); return o != 0 ? (Neodroid.FBS.Range?)(new Neodroid.FBS.Range()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int RangesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Array> CreateArray(FlatBufferBuilder builder,
      VectorOffset arrayOffset = default(VectorOffset),
      VectorOffset rangesOffset = default(VectorOffset)) {
    builder.StartObject(2);
    Array.AddRanges(builder, rangesOffset);
    Array.AddArray(builder, arrayOffset);
    return Array.EndArray(builder);
  }

  public static void StartArray(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddArray(FlatBufferBuilder builder, VectorOffset arrayOffset) { builder.AddOffset(0, arrayOffset.Value, 0); }
  public static VectorOffset CreateArrayVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static void StartArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRanges(FlatBufferBuilder builder, VectorOffset rangesOffset) { builder.AddOffset(1, rangesOffset.Value, 0); }
  public static void StartRangesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<Array> EndArray(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // array
    return new Offset<Array>(o);
  }
};

public struct RB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RB GetRootAsRB(ByteBuffer _bb) { return GetRootAsRB(_bb, new RB()); }
  public static RB GetRootAsRB(ByteBuffer _bb, RB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Neodroid.FBS.Body? Body { get { int o = __p.__offset(4); return o != 0 ? (Neodroid.FBS.Body?)(new Neodroid.FBS.Body()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartRB(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddBody(FlatBufferBuilder builder, Offset<Neodroid.FBS.Body> bodyOffset) { builder.AddStruct(0, bodyOffset.Value, 0); }
  public static Offset<RB> EndRB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // body
    return new Offset<RB>(o);
  }
};

public struct ET : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ET GetRootAsET(ByteBuffer _bb) { return GetRootAsET(_bb, new ET()); }
  public static ET GetRootAsET(ByteBuffer _bb, ET obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ET __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Neodroid.FBS.EulerTransform? Transform { get { int o = __p.__offset(4); return o != 0 ? (Neodroid.FBS.EulerTransform?)(new Neodroid.FBS.EulerTransform()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartET(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddTransform(FlatBufferBuilder builder, Offset<Neodroid.FBS.EulerTransform> transformOffset) { builder.AddStruct(0, transformOffset.Value, 0); }
  public static Offset<ET> EndET(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // transform
    return new Offset<ET>(o);
  }
};

public struct QT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static QT GetRootAsQT(ByteBuffer _bb) { return GetRootAsQT(_bb, new QT()); }
  public static QT GetRootAsQT(ByteBuffer _bb, QT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public QT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Neodroid.FBS.QuaternionTransform? Transform { get { int o = __p.__offset(4); return o != 0 ? (Neodroid.FBS.QuaternionTransform?)(new Neodroid.FBS.QuaternionTransform()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartQT(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddTransform(FlatBufferBuilder builder, Offset<Neodroid.FBS.QuaternionTransform> transformOffset) { builder.AddStruct(0, transformOffset.Value, 0); }
  public static Offset<QT> EndQT(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // transform
    return new Offset<QT>(o);
  }
};

public struct String : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static String GetRootAsString(ByteBuffer _bb) { return GetRootAsString(_bb, new String()); }
  public static String GetRootAsString(ByteBuffer _bb, String obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public String __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Str { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetStrBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<String> CreateString(FlatBufferBuilder builder,
      StringOffset strOffset = default(StringOffset)) {
    builder.StartObject(1);
    String.AddStr(builder, strOffset);
    return String.EndString(builder);
  }

  public static void StartString(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddStr(FlatBufferBuilder builder, StringOffset strOffset) { builder.AddOffset(0, strOffset.Value, 0); }
  public static Offset<String> EndString(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // str
    return new Offset<String>(o);
  }
};

public struct ByteArray : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ByteArray GetRootAsByteArray(ByteBuffer _bb) { return GetRootAsByteArray(_bb, new ByteArray()); }
  public static ByteArray GetRootAsByteArray(ByteBuffer _bb, ByteArray obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ByteArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Bytes(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int BytesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBytesBytes() { return __p.__vector_as_arraysegment(4); }
  public ByteDataType Type { get { int o = __p.__offset(6); return o != 0 ? (ByteDataType)__p.bb.Get(o + __p.bb_pos) : ByteDataType.PNG; } }

  public static Offset<ByteArray> CreateByteArray(FlatBufferBuilder builder,
      VectorOffset bytesOffset = default(VectorOffset),
      ByteDataType type = ByteDataType.PNG) {
    builder.StartObject(2);
    ByteArray.AddBytes(builder, bytesOffset);
    ByteArray.AddType(builder, type);
    return ByteArray.EndByteArray(builder);
  }

  public static void StartByteArray(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddBytes(FlatBufferBuilder builder, VectorOffset bytesOffset) { builder.AddOffset(0, bytesOffset.Value, 0); }
  public static VectorOffset CreateBytesVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static void StartBytesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddType(FlatBufferBuilder builder, ByteDataType type) { builder.AddByte(1, (byte)type, 0); }
  public static Offset<ByteArray> EndByteArray(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // bytes
    return new Offset<ByteArray>(o);
  }
};


}
