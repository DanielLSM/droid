// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Neodroid.FBS.Reaction
{

using global::System;
using global::FlatBuffers;

public struct Reaction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Reaction GetRootAsReaction(ByteBuffer _bb) { return GetRootAsReaction(_bb, new Reaction()); }
  public static Reaction GetRootAsReaction(ByteBuffer _bb, Reaction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ReactionBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "REAC"); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Reaction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EnvironmentName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetEnvironmentNameBytes() { return __p.__vector_as_arraysegment(4); }
  public ReactionParameters? Parameters { get { int o = __p.__offset(6); return o != 0 ? (ReactionParameters?)(new ReactionParameters()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Motion? Motions(int j) { int o = __p.__offset(8); return o != 0 ? (Motion?)(new Motion()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MotionsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Motion? MotionsByKey(string key) { int o = __p.__offset(8); return o != 0 ? Motion.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public Neodroid.FBS.Unobservables? Unobservables { get { int o = __p.__offset(10); return o != 0 ? (Neodroid.FBS.Unobservables?)(new Neodroid.FBS.Unobservables()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Configuration? Configurations(int j) { int o = __p.__offset(12); return o != 0 ? (Configuration?)(new Configuration()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConfigurationsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Configuration? ConfigurationsByKey(string key) { int o = __p.__offset(12); return o != 0 ? Configuration.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static void StartReaction(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddEnvironmentName(FlatBufferBuilder builder, StringOffset environmentNameOffset) { builder.AddOffset(0, environmentNameOffset.Value, 0); }
  public static void AddParameters(FlatBufferBuilder builder, Offset<ReactionParameters> parametersOffset) { builder.AddStruct(1, parametersOffset.Value, 0); }
  public static void AddMotions(FlatBufferBuilder builder, VectorOffset motionsOffset) { builder.AddOffset(2, motionsOffset.Value, 0); }
  public static VectorOffset CreateMotionsVector(FlatBufferBuilder builder, Offset<Motion>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMotionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnobservables(FlatBufferBuilder builder, Offset<Neodroid.FBS.Unobservables> unobservablesOffset) { builder.AddOffset(3, unobservablesOffset.Value, 0); }
  public static void AddConfigurations(FlatBufferBuilder builder, VectorOffset configurationsOffset) { builder.AddOffset(4, configurationsOffset.Value, 0); }
  public static VectorOffset CreateConfigurationsVector(FlatBufferBuilder builder, Offset<Configuration>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartConfigurationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Reaction> EndReaction(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // environment_name
    builder.Required(o, 6);  // parameters
    return new Offset<Reaction>(o);
  }
  public static void FinishReactionBuffer(FlatBufferBuilder builder, Offset<Reaction> offset) { builder.Finish(offset.Value, "REAC"); }

  public static VectorOffset CreateSortedVectorOfReaction(FlatBufferBuilder builder, Offset<Reaction>[] offsets) {
    Array.Sort(offsets, (Offset<Reaction> o1, Offset<Reaction> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Reaction? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new Reaction().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct ReactionParameters : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ReactionParameters __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Terminable { get { return 0!=__p.bb.Get(__p.bb_pos + 0); } }
  public bool Step { get { return 0!=__p.bb.Get(__p.bb_pos + 1); } }
  public bool Reset { get { return 0!=__p.bb.Get(__p.bb_pos + 2); } }
  public bool Configure { get { return 0!=__p.bb.Get(__p.bb_pos + 3); } }
  public bool Describe { get { return 0!=__p.bb.Get(__p.bb_pos + 4); } }
  public bool EpisodeCount { get { return 0!=__p.bb.Get(__p.bb_pos + 5); } }

  public static Offset<ReactionParameters> CreateReactionParameters(FlatBufferBuilder builder, bool Terminable, bool Step, bool Reset, bool Configure, bool Describe, bool EpisodeCount) {
    builder.Prep(1, 6);
    builder.PutBool(EpisodeCount);
    builder.PutBool(Describe);
    builder.PutBool(Configure);
    builder.PutBool(Reset);
    builder.PutBool(Step);
    builder.PutBool(Terminable);
    return new Offset<ReactionParameters>(builder.Offset);
  }
};

public struct Motion : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Motion GetRootAsMotion(ByteBuffer _bb) { return GetRootAsMotion(_bb, new Motion()); }
  public static Motion GetRootAsMotion(ByteBuffer _bb, Motion obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Motion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ActorName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetActorNameBytes() { return __p.__vector_as_arraysegment(4); }
  public string MotorName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetMotorNameBytes() { return __p.__vector_as_arraysegment(6); }
  public double Strength { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<Motion> CreateMotion(FlatBufferBuilder builder,
      StringOffset actor_nameOffset = default(StringOffset),
      StringOffset motor_nameOffset = default(StringOffset),
      double strength = 0.0) {
    builder.StartObject(3);
    Motion.AddStrength(builder, strength);
    Motion.AddMotorName(builder, motor_nameOffset);
    Motion.AddActorName(builder, actor_nameOffset);
    return Motion.EndMotion(builder);
  }

  public static void StartMotion(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddActorName(FlatBufferBuilder builder, StringOffset actorNameOffset) { builder.AddOffset(0, actorNameOffset.Value, 0); }
  public static void AddMotorName(FlatBufferBuilder builder, StringOffset motorNameOffset) { builder.AddOffset(1, motorNameOffset.Value, 0); }
  public static void AddStrength(FlatBufferBuilder builder, double strength) { builder.AddDouble(2, strength, 0.0); }
  public static Offset<Motion> EndMotion(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // actor_name
    builder.Required(o, 6);  // motor_name
    return new Offset<Motion>(o);
  }

  public static VectorOffset CreateSortedVectorOfMotion(FlatBufferBuilder builder, Offset<Motion>[] offsets) {
    Array.Sort(offsets, (Offset<Motion> o1, Offset<Motion> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Motion? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new Motion().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct Configuration : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Configuration GetRootAsConfiguration(ByteBuffer _bb) { return GetRootAsConfiguration(_bb, new Configuration()); }
  public static Configuration GetRootAsConfiguration(ByteBuffer _bb, Configuration obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Configuration __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ConfigurableName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetConfigurableNameBytes() { return __p.__vector_as_arraysegment(4); }
  public double ConfigurableValue { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<Configuration> CreateConfiguration(FlatBufferBuilder builder,
      StringOffset configurable_nameOffset = default(StringOffset),
      double configurable_value = 0.0) {
    builder.StartObject(2);
    Configuration.AddConfigurableValue(builder, configurable_value);
    Configuration.AddConfigurableName(builder, configurable_nameOffset);
    return Configuration.EndConfiguration(builder);
  }

  public static void StartConfiguration(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddConfigurableName(FlatBufferBuilder builder, StringOffset configurableNameOffset) { builder.AddOffset(0, configurableNameOffset.Value, 0); }
  public static void AddConfigurableValue(FlatBufferBuilder builder, double configurableValue) { builder.AddDouble(1, configurableValue, 0.0); }
  public static Offset<Configuration> EndConfiguration(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // configurable_name
    return new Offset<Configuration>(o);
  }

  public static VectorOffset CreateSortedVectorOfConfiguration(FlatBufferBuilder builder, Offset<Configuration>[] offsets) {
    Array.Sort(offsets, (Offset<Configuration> o1, Offset<Configuration> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Configuration? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new Configuration().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
