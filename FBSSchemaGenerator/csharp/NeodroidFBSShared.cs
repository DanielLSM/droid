// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Neodroid.FBS
{

using global::System;
using global::FlatBuffers;

public struct Unobservables : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Unobservables GetRootAsUnobservables(ByteBuffer _bb) { return GetRootAsUnobservables(_bb, new Unobservables()); }
  public static Unobservables GetRootAsUnobservables(ByteBuffer _bb, Unobservables obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Unobservables __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public QuaternionTransform? Poses(int j) { int o = __p.__offset(4); return o != 0 ? (QuaternionTransform?)(new QuaternionTransform()).__assign(__p.__vector(o) + j * 56, __p.bb) : null; }
  public int PosesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Body? Bodies(int j) { int o = __p.__offset(6); return o != 0 ? (Body?)(new Body()).__assign(__p.__vector(o) + j * 48, __p.bb) : null; }
  public int BodiesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Unobservables> CreateUnobservables(FlatBufferBuilder builder,
      VectorOffset posesOffset = default(VectorOffset),
      VectorOffset bodiesOffset = default(VectorOffset)) {
    builder.StartObject(2);
    Unobservables.AddBodies(builder, bodiesOffset);
    Unobservables.AddPoses(builder, posesOffset);
    return Unobservables.EndUnobservables(builder);
  }

  public static void StartUnobservables(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddPoses(FlatBufferBuilder builder, VectorOffset posesOffset) { builder.AddOffset(0, posesOffset.Value, 0); }
  public static void StartPosesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(56, numElems, 8); }
  public static void AddBodies(FlatBufferBuilder builder, VectorOffset bodiesOffset) { builder.AddOffset(1, bodiesOffset.Value, 0); }
  public static void StartBodiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(48, numElems, 8); }
  public static Offset<Unobservables> EndUnobservables(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Unobservables>(o);
  }
};

public struct Vector3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double X { get { return __p.bb.GetDouble(__p.bb_pos + 0); } }
  public double Y { get { return __p.bb.GetDouble(__p.bb_pos + 8); } }
  public double Z { get { return __p.bb.GetDouble(__p.bb_pos + 16); } }

  public static Offset<Vector3> CreateVector3(FlatBufferBuilder builder, double X, double Y, double Z) {
    builder.Prep(8, 24);
    builder.PutDouble(Z);
    builder.PutDouble(Y);
    builder.PutDouble(X);
    return new Offset<Vector3>(builder.Offset);
  }
};

public struct Quaternion : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Quaternion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double X { get { return __p.bb.GetDouble(__p.bb_pos + 0); } }
  public double Y { get { return __p.bb.GetDouble(__p.bb_pos + 8); } }
  public double Z { get { return __p.bb.GetDouble(__p.bb_pos + 16); } }
  public double W { get { return __p.bb.GetDouble(__p.bb_pos + 24); } }

  public static Offset<Quaternion> CreateQuaternion(FlatBufferBuilder builder, double X, double Y, double Z, double W) {
    builder.Prep(8, 32);
    builder.PutDouble(W);
    builder.PutDouble(Z);
    builder.PutDouble(Y);
    builder.PutDouble(X);
    return new Offset<Quaternion>(builder.Offset);
  }
};

public struct QuaternionTransform : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public QuaternionTransform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vector3 Position { get { return (new Vector3()).__assign(__p.bb_pos + 0, __p.bb); } }
  public Quaternion Rotation { get { return (new Quaternion()).__assign(__p.bb_pos + 24, __p.bb); } }

  public static Offset<QuaternionTransform> CreateQuaternionTransform(FlatBufferBuilder builder, double position_X, double position_Y, double position_Z, double rotation_X, double rotation_Y, double rotation_Z, double rotation_W) {
    builder.Prep(8, 56);
    builder.Prep(8, 32);
    builder.PutDouble(rotation_W);
    builder.PutDouble(rotation_Z);
    builder.PutDouble(rotation_Y);
    builder.PutDouble(rotation_X);
    builder.Prep(8, 24);
    builder.PutDouble(position_Z);
    builder.PutDouble(position_Y);
    builder.PutDouble(position_X);
    return new Offset<QuaternionTransform>(builder.Offset);
  }
};

public struct EulerTransform : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EulerTransform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vector3 Position { get { return (new Vector3()).__assign(__p.bb_pos + 0, __p.bb); } }
  public Vector3 Rotation { get { return (new Vector3()).__assign(__p.bb_pos + 24, __p.bb); } }
  public Vector3 Direction { get { return (new Vector3()).__assign(__p.bb_pos + 48, __p.bb); } }

  public static Offset<EulerTransform> CreateEulerTransform(FlatBufferBuilder builder, double position_X, double position_Y, double position_Z, double rotation_X, double rotation_Y, double rotation_Z, double direction_X, double direction_Y, double direction_Z) {
    builder.Prep(8, 72);
    builder.Prep(8, 24);
    builder.PutDouble(direction_Z);
    builder.PutDouble(direction_Y);
    builder.PutDouble(direction_X);
    builder.Prep(8, 24);
    builder.PutDouble(rotation_Z);
    builder.PutDouble(rotation_Y);
    builder.PutDouble(rotation_X);
    builder.Prep(8, 24);
    builder.PutDouble(position_Z);
    builder.PutDouble(position_Y);
    builder.PutDouble(position_X);
    return new Offset<EulerTransform>(builder.Offset);
  }
};

public struct Body : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Body __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vector3 Velocity { get { return (new Vector3()).__assign(__p.bb_pos + 0, __p.bb); } }
  public Vector3 AngularVelocity { get { return (new Vector3()).__assign(__p.bb_pos + 24, __p.bb); } }

  public static Offset<Body> CreateBody(FlatBufferBuilder builder, double velocity_X, double velocity_Y, double velocity_Z, double angular_velocity_X, double angular_velocity_Y, double angular_velocity_Z) {
    builder.Prep(8, 48);
    builder.Prep(8, 24);
    builder.PutDouble(angular_velocity_Z);
    builder.PutDouble(angular_velocity_Y);
    builder.PutDouble(angular_velocity_X);
    builder.Prep(8, 24);
    builder.PutDouble(velocity_Z);
    builder.PutDouble(velocity_Y);
    builder.PutDouble(velocity_X);
    return new Offset<Body>(builder.Offset);
  }
};

public struct Range : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Range __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int DecimalGranularity { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public float MaxValue { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float MinValue { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<Range> CreateRange(FlatBufferBuilder builder, int DecimalGranularity, float MaxValue, float MinValue) {
    builder.Prep(4, 12);
    builder.PutFloat(MinValue);
    builder.PutFloat(MaxValue);
    builder.PutInt(DecimalGranularity);
    return new Offset<Range>(builder.Offset);
  }
};

public struct SimulatorConfiguration : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SimulatorConfiguration __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Width { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Height { get { return __p.bb.GetInt(__p.bb_pos + 4); } }
  public bool FullScreen { get { return 0!=__p.bb.Get(__p.bb_pos + 8); } }
  public int QualityLevel { get { return __p.bb.GetInt(__p.bb_pos + 12); } }
  public float TimeScale { get { return __p.bb.GetFloat(__p.bb_pos + 16); } }
  public float TargetFrameRate { get { return __p.bb.GetFloat(__p.bb_pos + 20); } }
  public int WaitEvery { get { return __p.bb.GetInt(__p.bb_pos + 24); } }
  public int FrameSkips { get { return __p.bb.GetInt(__p.bb_pos + 28); } }
  public int ResetIterations { get { return __p.bb.GetInt(__p.bb_pos + 32); } }

  public static Offset<SimulatorConfiguration> CreateSimulatorConfiguration(FlatBufferBuilder builder, int Width, int Height, bool FullScreen, int QualityLevel, float TimeScale, float TargetFrameRate, int WaitEvery, int FrameSkips, int ResetIterations) {
    builder.Prep(4, 36);
    builder.PutInt(ResetIterations);
    builder.PutInt(FrameSkips);
    builder.PutInt(WaitEvery);
    builder.PutFloat(TargetFrameRate);
    builder.PutFloat(TimeScale);
    builder.PutInt(QualityLevel);
    builder.Pad(3);
    builder.PutBool(FullScreen);
    builder.PutInt(Height);
    builder.PutInt(Width);
    return new Offset<SimulatorConfiguration>(builder.Offset);
  }
};


}
