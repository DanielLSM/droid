// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Neodroid.FBS.State
{

using global::System;
using global::FlatBuffers;

public struct State : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static State GetRootAsState(ByteBuffer _bb) { return GetRootAsState(_bb, new State()); }
  public static State GetRootAsState(ByteBuffer _bb, State obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool StateBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "STAT"); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public State __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EnvironmentName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetEnvironmentNameBytes() { return __p.__vector_as_arraysegment(4); }
  public int FrameNumber { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Reward { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool Terminated { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float TotalEnergySpent { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public OBS? Observations(int j) { int o = __p.__offset(14); return o != 0 ? (OBS?)(new OBS()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ObservationsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public OBS? ObservationsByKey(string key) { int o = __p.__offset(14); return o != 0 ? OBS.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public Neodroid.FBS.Unobservables? Unobservables { get { int o = __p.__offset(16); return o != 0 ? (Neodroid.FBS.Unobservables?)(new Neodroid.FBS.Unobservables()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public EnvironmentDescription? EnvironmentDescription { get { int o = __p.__offset(18); return o != 0 ? (EnvironmentDescription?)(new EnvironmentDescription()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string DebugMessage { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDebugMessageBytes() { return __p.__vector_as_arraysegment(20); }

  public static Offset<State> CreateState(FlatBufferBuilder builder,
      StringOffset environment_nameOffset = default(StringOffset),
      int frame_number = 0,
      float reward = 0.0f,
      bool terminated = false,
      float total_energy_spent = 0.0f,
      VectorOffset observationsOffset = default(VectorOffset),
      Offset<Neodroid.FBS.Unobservables> unobservablesOffset = default(Offset<Neodroid.FBS.Unobservables>),
      Offset<EnvironmentDescription> environment_descriptionOffset = default(Offset<EnvironmentDescription>),
      StringOffset debug_messageOffset = default(StringOffset)) {
    builder.StartObject(9);
    State.AddDebugMessage(builder, debug_messageOffset);
    State.AddEnvironmentDescription(builder, environment_descriptionOffset);
    State.AddUnobservables(builder, unobservablesOffset);
    State.AddObservations(builder, observationsOffset);
    State.AddTotalEnergySpent(builder, total_energy_spent);
    State.AddReward(builder, reward);
    State.AddFrameNumber(builder, frame_number);
    State.AddEnvironmentName(builder, environment_nameOffset);
    State.AddTerminated(builder, terminated);
    return State.EndState(builder);
  }

  public static void StartState(FlatBufferBuilder builder) { builder.StartObject(9); }
  public static void AddEnvironmentName(FlatBufferBuilder builder, StringOffset environmentNameOffset) { builder.AddOffset(0, environmentNameOffset.Value, 0); }
  public static void AddFrameNumber(FlatBufferBuilder builder, int frameNumber) { builder.AddInt(1, frameNumber, 0); }
  public static void AddReward(FlatBufferBuilder builder, float reward) { builder.AddFloat(2, reward, 0.0f); }
  public static void AddTerminated(FlatBufferBuilder builder, bool terminated) { builder.AddBool(3, terminated, false); }
  public static void AddTotalEnergySpent(FlatBufferBuilder builder, float totalEnergySpent) { builder.AddFloat(4, totalEnergySpent, 0.0f); }
  public static void AddObservations(FlatBufferBuilder builder, VectorOffset observationsOffset) { builder.AddOffset(5, observationsOffset.Value, 0); }
  public static VectorOffset CreateObservationsVector(FlatBufferBuilder builder, Offset<OBS>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartObservationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnobservables(FlatBufferBuilder builder, Offset<Neodroid.FBS.Unobservables> unobservablesOffset) { builder.AddOffset(6, unobservablesOffset.Value, 0); }
  public static void AddEnvironmentDescription(FlatBufferBuilder builder, Offset<EnvironmentDescription> environmentDescriptionOffset) { builder.AddOffset(7, environmentDescriptionOffset.Value, 0); }
  public static void AddDebugMessage(FlatBufferBuilder builder, StringOffset debugMessageOffset) { builder.AddOffset(8, debugMessageOffset.Value, 0); }
  public static Offset<State> EndState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // environment_name
    return new Offset<State>(o);
  }
  public static void FinishStateBuffer(FlatBufferBuilder builder, Offset<State> offset) { builder.Finish(offset.Value, "STAT"); }

  public static VectorOffset CreateSortedVectorOfState(FlatBufferBuilder builder, Offset<State>[] offsets) {
    Array.Sort(offsets, (Offset<State> o1, Offset<State> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static State? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new State().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct EnvironmentDescription : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EnvironmentDescription GetRootAsEnvironmentDescription(ByteBuffer _bb) { return GetRootAsEnvironmentDescription(_bb, new EnvironmentDescription()); }
  public static EnvironmentDescription GetRootAsEnvironmentDescription(ByteBuffer _bb, EnvironmentDescription obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EnvironmentDescription __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MaxEpisodeLength { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float SolvedThreshold { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string ApiVersion { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetApiVersionBytes() { return __p.__vector_as_arraysegment(8); }
  public Neodroid.FBS.SimulatorConfiguration? SimulatorConfiguration { get { int o = __p.__offset(10); return o != 0 ? (Neodroid.FBS.SimulatorConfiguration?)(new Neodroid.FBS.SimulatorConfiguration()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Actor? Actors(int j) { int o = __p.__offset(12); return o != 0 ? (Actor?)(new Actor()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ActorsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Actor? ActorsByKey(string key) { int o = __p.__offset(12); return o != 0 ? Actor.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public Configurable? Configurables(int j) { int o = __p.__offset(14); return o != 0 ? (Configurable?)(new Configurable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConfigurablesLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Configurable? ConfigurablesByKey(string key) { int o = __p.__offset(14); return o != 0 ? Configurable.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static void StartEnvironmentDescription(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddMaxEpisodeLength(FlatBufferBuilder builder, int maxEpisodeLength) { builder.AddInt(0, maxEpisodeLength, 0); }
  public static void AddSolvedThreshold(FlatBufferBuilder builder, float solvedThreshold) { builder.AddFloat(1, solvedThreshold, 0.0f); }
  public static void AddApiVersion(FlatBufferBuilder builder, StringOffset apiVersionOffset) { builder.AddOffset(2, apiVersionOffset.Value, 0); }
  public static void AddSimulatorConfiguration(FlatBufferBuilder builder, Offset<Neodroid.FBS.SimulatorConfiguration> simulatorConfigurationOffset) { builder.AddStruct(3, simulatorConfigurationOffset.Value, 0); }
  public static void AddActors(FlatBufferBuilder builder, VectorOffset actorsOffset) { builder.AddOffset(4, actorsOffset.Value, 0); }
  public static VectorOffset CreateActorsVector(FlatBufferBuilder builder, Offset<Actor>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartActorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConfigurables(FlatBufferBuilder builder, VectorOffset configurablesOffset) { builder.AddOffset(5, configurablesOffset.Value, 0); }
  public static VectorOffset CreateConfigurablesVector(FlatBufferBuilder builder, Offset<Configurable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartConfigurablesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<EnvironmentDescription> EndEnvironmentDescription(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EnvironmentDescription>(o);
  }
};

public struct Configurable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Configurable GetRootAsConfigurable(ByteBuffer _bb) { return GetRootAsConfigurable(_bb, new Configurable()); }
  public static Configurable GetRootAsConfigurable(ByteBuffer _bb, Configurable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Configurable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ConfigurableName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetConfigurableNameBytes() { return __p.__vector_as_arraysegment(4); }
  public Observation ObservationType { get { int o = __p.__offset(6); return o != 0 ? (Observation)__p.bb.Get(o + __p.bb_pos) : Observation.NONE; } }
  public TTable? Observation<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<Configurable> CreateConfigurable(FlatBufferBuilder builder,
      StringOffset configurable_nameOffset = default(StringOffset),
      Observation observation_type = Observation.NONE,
      int observationOffset = 0) {
    builder.StartObject(3);
    Configurable.AddObservation(builder, observationOffset);
    Configurable.AddConfigurableName(builder, configurable_nameOffset);
    Configurable.AddObservationType(builder, observation_type);
    return Configurable.EndConfigurable(builder);
  }

  public static void StartConfigurable(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddConfigurableName(FlatBufferBuilder builder, StringOffset configurableNameOffset) { builder.AddOffset(0, configurableNameOffset.Value, 0); }
  public static void AddObservationType(FlatBufferBuilder builder, Observation observationType) { builder.AddByte(1, (byte)observationType, 0); }
  public static void AddObservation(FlatBufferBuilder builder, int observationOffset) { builder.AddOffset(2, observationOffset, 0); }
  public static Offset<Configurable> EndConfigurable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // configurable_name
    return new Offset<Configurable>(o);
  }

  public static VectorOffset CreateSortedVectorOfConfigurable(FlatBufferBuilder builder, Offset<Configurable>[] offsets) {
    Array.Sort(offsets, (Offset<Configurable> o1, Offset<Configurable> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Configurable? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new Configurable().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct Actor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Actor GetRootAsActor(ByteBuffer _bb) { return GetRootAsActor(_bb, new Actor()); }
  public static Actor GetRootAsActor(ByteBuffer _bb, Actor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Actor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ActorName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetActorNameBytes() { return __p.__vector_as_arraysegment(4); }
  public bool Alive { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Motor? Motors(int j) { int o = __p.__offset(8); return o != 0 ? (Motor?)(new Motor()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MotorsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Motor? MotorsByKey(string key) { int o = __p.__offset(8); return o != 0 ? Motor.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<Actor> CreateActor(FlatBufferBuilder builder,
      StringOffset actor_nameOffset = default(StringOffset),
      bool alive = false,
      VectorOffset motorsOffset = default(VectorOffset)) {
    builder.StartObject(3);
    Actor.AddMotors(builder, motorsOffset);
    Actor.AddActorName(builder, actor_nameOffset);
    Actor.AddAlive(builder, alive);
    return Actor.EndActor(builder);
  }

  public static void StartActor(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddActorName(FlatBufferBuilder builder, StringOffset actorNameOffset) { builder.AddOffset(0, actorNameOffset.Value, 0); }
  public static void AddAlive(FlatBufferBuilder builder, bool alive) { builder.AddBool(1, alive, false); }
  public static void AddMotors(FlatBufferBuilder builder, VectorOffset motorsOffset) { builder.AddOffset(2, motorsOffset.Value, 0); }
  public static VectorOffset CreateMotorsVector(FlatBufferBuilder builder, Offset<Motor>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMotorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Actor> EndActor(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // actor_name
    return new Offset<Actor>(o);
  }

  public static VectorOffset CreateSortedVectorOfActor(FlatBufferBuilder builder, Offset<Actor>[] offsets) {
    Array.Sort(offsets, (Offset<Actor> o1, Offset<Actor> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Actor? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new Actor().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct Motor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Motor GetRootAsMotor(ByteBuffer _bb) { return GetRootAsMotor(_bb, new Motor()); }
  public static Motor GetRootAsMotor(ByteBuffer _bb, Motor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Motor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string MotorName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetMotorNameBytes() { return __p.__vector_as_arraysegment(4); }
  public Neodroid.FBS.Range? ValidInput { get { int o = __p.__offset(6); return o != 0 ? (Neodroid.FBS.Range?)(new Neodroid.FBS.Range()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float EnergySpentSinceReset { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static void StartMotor(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddMotorName(FlatBufferBuilder builder, StringOffset motorNameOffset) { builder.AddOffset(0, motorNameOffset.Value, 0); }
  public static void AddValidInput(FlatBufferBuilder builder, Offset<Neodroid.FBS.Range> validInputOffset) { builder.AddStruct(1, validInputOffset.Value, 0); }
  public static void AddEnergySpentSinceReset(FlatBufferBuilder builder, float energySpentSinceReset) { builder.AddFloat(2, energySpentSinceReset, 0.0f); }
  public static Offset<Motor> EndMotor(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // motor_name
    builder.Required(o, 6);  // valid_input
    return new Offset<Motor>(o);
  }

  public static VectorOffset CreateSortedVectorOfMotor(FlatBufferBuilder builder, Offset<Motor>[] offsets) {
    Array.Sort(offsets, (Offset<Motor> o1, Offset<Motor> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Motor? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new Motor().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct OBS : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static OBS GetRootAsOBS(ByteBuffer _bb) { return GetRootAsOBS(_bb, new OBS()); }
  public static OBS GetRootAsOBS(ByteBuffer _bb, OBS obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public OBS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ObservationName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetObservationNameBytes() { return __p.__vector_as_arraysegment(4); }
  public Observation ObservationType { get { int o = __p.__offset(6); return o != 0 ? (Observation)__p.bb.Get(o + __p.bb_pos) : Observation.NONE; } }
  public TTable? Observation<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<OBS> CreateOBS(FlatBufferBuilder builder,
      StringOffset observation_nameOffset = default(StringOffset),
      Observation observation_type = Observation.NONE,
      int observationOffset = 0) {
    builder.StartObject(3);
    OBS.AddObservation(builder, observationOffset);
    OBS.AddObservationName(builder, observation_nameOffset);
    OBS.AddObservationType(builder, observation_type);
    return OBS.EndOBS(builder);
  }

  public static void StartOBS(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddObservationName(FlatBufferBuilder builder, StringOffset observationNameOffset) { builder.AddOffset(0, observationNameOffset.Value, 0); }
  public static void AddObservationType(FlatBufferBuilder builder, Observation observationType) { builder.AddByte(1, (byte)observationType, 0); }
  public static void AddObservation(FlatBufferBuilder builder, int observationOffset) { builder.AddOffset(2, observationOffset, 0); }
  public static Offset<OBS> EndOBS(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // observation_name
    return new Offset<OBS>(o);
  }

  public static VectorOffset CreateSortedVectorOfOBS(FlatBufferBuilder builder, Offset<OBS>[] offsets) {
    Array.Sort(offsets, (Offset<OBS> o1, Offset<OBS> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static OBS? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new OBS().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
