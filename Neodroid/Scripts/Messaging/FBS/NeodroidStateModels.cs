// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Neodroid.FBS.State
{

using global::System;
using global::FlatBuffers;

public struct FBSRange : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSRange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int DecimalGranularity { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public float MaxValue { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float MinValue { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<FBSRange> CreateFBSRange(FlatBufferBuilder builder, int DecimalGranularity, float MaxValue, float MinValue) {
    builder.Prep(4, 12);
    builder.PutFloat(MinValue);
    builder.PutFloat(MaxValue);
    builder.PutInt(DecimalGranularity);
    return new Offset<FBSRange>(builder.Offset);
  }
};

public struct FBSState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSState GetRootAsFBSState(ByteBuffer _bb) { return GetRootAsFBSState(_bb, new FBSState()); }
  public static FBSState GetRootAsFBSState(ByteBuffer _bb, FBSState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool FBSStateBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "STAT"); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EnvironmentName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetEnvironmentNameBytes() { return __p.__vector_as_arraysegment(4); }
  public int FrameNumber { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Reward { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool Terminated { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float TotalEnergySpent { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public FBSObserver? Observers(int j) { int o = __p.__offset(14); return o != 0 ? (FBSObserver?)(new FBSObserver()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ObserversLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FBSObserver? ObserversByKey(string key) { int o = __p.__offset(14); return o != 0 ? FBSObserver.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public Neodroid.FBS.FBSUnobservables? Unobservables { get { int o = __p.__offset(16); return o != 0 ? (Neodroid.FBS.FBSUnobservables?)(new Neodroid.FBS.FBSUnobservables()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public FBSEnvironmentDescription? EnvironmentDescription { get { int o = __p.__offset(18); return o != 0 ? (FBSEnvironmentDescription?)(new FBSEnvironmentDescription()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string DebugMessage { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDebugMessageBytes() { return __p.__vector_as_arraysegment(20); }

  public static Offset<FBSState> CreateFBSState(FlatBufferBuilder builder,
      StringOffset environment_nameOffset = default(StringOffset),
      int frame_number = 0,
      float reward = 0.0f,
      bool terminated = false,
      float total_energy_spent = 0.0f,
      VectorOffset observersOffset = default(VectorOffset),
      Offset<Neodroid.FBS.FBSUnobservables> unobservablesOffset = default(Offset<Neodroid.FBS.FBSUnobservables>),
      Offset<FBSEnvironmentDescription> environment_descriptionOffset = default(Offset<FBSEnvironmentDescription>),
      StringOffset debug_messageOffset = default(StringOffset)) {
    builder.StartObject(9);
    FBSState.AddDebugMessage(builder, debug_messageOffset);
    FBSState.AddEnvironmentDescription(builder, environment_descriptionOffset);
    FBSState.AddUnobservables(builder, unobservablesOffset);
    FBSState.AddObservers(builder, observersOffset);
    FBSState.AddTotalEnergySpent(builder, total_energy_spent);
    FBSState.AddReward(builder, reward);
    FBSState.AddFrameNumber(builder, frame_number);
    FBSState.AddEnvironmentName(builder, environment_nameOffset);
    FBSState.AddTerminated(builder, terminated);
    return FBSState.EndFBSState(builder);
  }

  public static void StartFBSState(FlatBufferBuilder builder) { builder.StartObject(9); }
  public static void AddEnvironmentName(FlatBufferBuilder builder, StringOffset environmentNameOffset) { builder.AddOffset(0, environmentNameOffset.Value, 0); }
  public static void AddFrameNumber(FlatBufferBuilder builder, int frameNumber) { builder.AddInt(1, frameNumber, 0); }
  public static void AddReward(FlatBufferBuilder builder, float reward) { builder.AddFloat(2, reward, 0.0f); }
  public static void AddTerminated(FlatBufferBuilder builder, bool terminated) { builder.AddBool(3, terminated, false); }
  public static void AddTotalEnergySpent(FlatBufferBuilder builder, float totalEnergySpent) { builder.AddFloat(4, totalEnergySpent, 0.0f); }
  public static void AddObservers(FlatBufferBuilder builder, VectorOffset observersOffset) { builder.AddOffset(5, observersOffset.Value, 0); }
  public static VectorOffset CreateObserversVector(FlatBufferBuilder builder, Offset<FBSObserver>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartObserversVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnobservables(FlatBufferBuilder builder, Offset<Neodroid.FBS.FBSUnobservables> unobservablesOffset) { builder.AddOffset(6, unobservablesOffset.Value, 0); }
  public static void AddEnvironmentDescription(FlatBufferBuilder builder, Offset<FBSEnvironmentDescription> environmentDescriptionOffset) { builder.AddOffset(7, environmentDescriptionOffset.Value, 0); }
  public static void AddDebugMessage(FlatBufferBuilder builder, StringOffset debugMessageOffset) { builder.AddOffset(8, debugMessageOffset.Value, 0); }
  public static Offset<FBSState> EndFBSState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // environment_name
    return new Offset<FBSState>(o);
  }
  public static void FinishFBSStateBuffer(FlatBufferBuilder builder, Offset<FBSState> offset) { builder.Finish(offset.Value, "STAT"); }

  public static VectorOffset CreateSortedVectorOfFBSState(FlatBufferBuilder builder, Offset<FBSState>[] offsets) {
    Array.Sort(offsets, (Offset<FBSState> o1, Offset<FBSState> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FBSState? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FBSState().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct FBSEnvironmentDescription : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSEnvironmentDescription GetRootAsFBSEnvironmentDescription(ByteBuffer _bb) { return GetRootAsFBSEnvironmentDescription(_bb, new FBSEnvironmentDescription()); }
  public static FBSEnvironmentDescription GetRootAsFBSEnvironmentDescription(ByteBuffer _bb, FBSEnvironmentDescription obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSEnvironmentDescription __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MaxEpisodeLength { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float SolvedThreshold { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public FBSActor? Actors(int j) { int o = __p.__offset(8); return o != 0 ? (FBSActor?)(new FBSActor()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ActorsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FBSActor? ActorsByKey(string key) { int o = __p.__offset(8); return o != 0 ? FBSActor.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public FBSConfigurable? Configurables(int j) { int o = __p.__offset(10); return o != 0 ? (FBSConfigurable?)(new FBSConfigurable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConfigurablesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FBSConfigurable? ConfigurablesByKey(string key) { int o = __p.__offset(10); return o != 0 ? FBSConfigurable.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<FBSEnvironmentDescription> CreateFBSEnvironmentDescription(FlatBufferBuilder builder,
      int max_episode_length = 0,
      float solved_threshold = 0.0f,
      VectorOffset actorsOffset = default(VectorOffset),
      VectorOffset configurablesOffset = default(VectorOffset)) {
    builder.StartObject(4);
    FBSEnvironmentDescription.AddConfigurables(builder, configurablesOffset);
    FBSEnvironmentDescription.AddActors(builder, actorsOffset);
    FBSEnvironmentDescription.AddSolvedThreshold(builder, solved_threshold);
    FBSEnvironmentDescription.AddMaxEpisodeLength(builder, max_episode_length);
    return FBSEnvironmentDescription.EndFBSEnvironmentDescription(builder);
  }

  public static void StartFBSEnvironmentDescription(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddMaxEpisodeLength(FlatBufferBuilder builder, int maxEpisodeLength) { builder.AddInt(0, maxEpisodeLength, 0); }
  public static void AddSolvedThreshold(FlatBufferBuilder builder, float solvedThreshold) { builder.AddFloat(1, solvedThreshold, 0.0f); }
  public static void AddActors(FlatBufferBuilder builder, VectorOffset actorsOffset) { builder.AddOffset(2, actorsOffset.Value, 0); }
  public static VectorOffset CreateActorsVector(FlatBufferBuilder builder, Offset<FBSActor>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartActorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConfigurables(FlatBufferBuilder builder, VectorOffset configurablesOffset) { builder.AddOffset(3, configurablesOffset.Value, 0); }
  public static VectorOffset CreateConfigurablesVector(FlatBufferBuilder builder, Offset<FBSConfigurable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartConfigurablesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FBSEnvironmentDescription> EndFBSEnvironmentDescription(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSEnvironmentDescription>(o);
  }
};

public struct FBSConfigurable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSConfigurable GetRootAsFBSConfigurable(ByteBuffer _bb) { return GetRootAsFBSConfigurable(_bb, new FBSConfigurable()); }
  public static FBSConfigurable GetRootAsFBSConfigurable(ByteBuffer _bb, FBSConfigurable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSConfigurable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ConfigurableName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetConfigurableNameBytes() { return __p.__vector_as_arraysegment(4); }
  public FBSRange? ValidInput { get { int o = __p.__offset(6); return o != 0 ? (FBSRange?)(new FBSRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Neodroid.FBS.FBSObserverData ObservationType { get { int o = __p.__offset(8); return o != 0 ? (Neodroid.FBS.FBSObserverData)__p.bb.Get(o + __p.bb_pos) : Neodroid.FBS.FBSObserverData.NONE; } }
  public TTable? Observation<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static void StartFBSConfigurable(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddConfigurableName(FlatBufferBuilder builder, StringOffset configurableNameOffset) { builder.AddOffset(0, configurableNameOffset.Value, 0); }
  public static void AddValidInput(FlatBufferBuilder builder, Offset<FBSRange> validInputOffset) { builder.AddStruct(1, validInputOffset.Value, 0); }
  public static void AddObservationType(FlatBufferBuilder builder, Neodroid.FBS.FBSObserverData observationType) { builder.AddByte(2, (byte)observationType, 0); }
  public static void AddObservation(FlatBufferBuilder builder, int observationOffset) { builder.AddOffset(3, observationOffset, 0); }
  public static Offset<FBSConfigurable> EndFBSConfigurable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // configurable_name
    builder.Required(o, 6);  // valid_input
    return new Offset<FBSConfigurable>(o);
  }

  public static VectorOffset CreateSortedVectorOfFBSConfigurable(FlatBufferBuilder builder, Offset<FBSConfigurable>[] offsets) {
    Array.Sort(offsets, (Offset<FBSConfigurable> o1, Offset<FBSConfigurable> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FBSConfigurable? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FBSConfigurable().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct FBSActor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSActor GetRootAsFBSActor(ByteBuffer _bb) { return GetRootAsFBSActor(_bb, new FBSActor()); }
  public static FBSActor GetRootAsFBSActor(ByteBuffer _bb, FBSActor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSActor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ActorName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetActorNameBytes() { return __p.__vector_as_arraysegment(4); }
  public bool Alive { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public FBSMotor? Motors(int j) { int o = __p.__offset(8); return o != 0 ? (FBSMotor?)(new FBSMotor()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MotorsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FBSMotor? MotorsByKey(string key) { int o = __p.__offset(8); return o != 0 ? FBSMotor.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<FBSActor> CreateFBSActor(FlatBufferBuilder builder,
      StringOffset actor_nameOffset = default(StringOffset),
      bool alive = false,
      VectorOffset motorsOffset = default(VectorOffset)) {
    builder.StartObject(3);
    FBSActor.AddMotors(builder, motorsOffset);
    FBSActor.AddActorName(builder, actor_nameOffset);
    FBSActor.AddAlive(builder, alive);
    return FBSActor.EndFBSActor(builder);
  }

  public static void StartFBSActor(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddActorName(FlatBufferBuilder builder, StringOffset actorNameOffset) { builder.AddOffset(0, actorNameOffset.Value, 0); }
  public static void AddAlive(FlatBufferBuilder builder, bool alive) { builder.AddBool(1, alive, false); }
  public static void AddMotors(FlatBufferBuilder builder, VectorOffset motorsOffset) { builder.AddOffset(2, motorsOffset.Value, 0); }
  public static VectorOffset CreateMotorsVector(FlatBufferBuilder builder, Offset<FBSMotor>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMotorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FBSActor> EndFBSActor(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // actor_name
    return new Offset<FBSActor>(o);
  }

  public static VectorOffset CreateSortedVectorOfFBSActor(FlatBufferBuilder builder, Offset<FBSActor>[] offsets) {
    Array.Sort(offsets, (Offset<FBSActor> o1, Offset<FBSActor> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FBSActor? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FBSActor().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct FBSMotor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSMotor GetRootAsFBSMotor(ByteBuffer _bb) { return GetRootAsFBSMotor(_bb, new FBSMotor()); }
  public static FBSMotor GetRootAsFBSMotor(ByteBuffer _bb, FBSMotor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSMotor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string MotorName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetMotorNameBytes() { return __p.__vector_as_arraysegment(4); }
  public FBSRange? ValidInput { get { int o = __p.__offset(6); return o != 0 ? (FBSRange?)(new FBSRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float EnergySpentSinceReset { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static void StartFBSMotor(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddMotorName(FlatBufferBuilder builder, StringOffset motorNameOffset) { builder.AddOffset(0, motorNameOffset.Value, 0); }
  public static void AddValidInput(FlatBufferBuilder builder, Offset<FBSRange> validInputOffset) { builder.AddStruct(1, validInputOffset.Value, 0); }
  public static void AddEnergySpentSinceReset(FlatBufferBuilder builder, float energySpentSinceReset) { builder.AddFloat(2, energySpentSinceReset, 0.0f); }
  public static Offset<FBSMotor> EndFBSMotor(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // motor_name
    builder.Required(o, 6);  // valid_input
    return new Offset<FBSMotor>(o);
  }

  public static VectorOffset CreateSortedVectorOfFBSMotor(FlatBufferBuilder builder, Offset<FBSMotor>[] offsets) {
    Array.Sort(offsets, (Offset<FBSMotor> o1, Offset<FBSMotor> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FBSMotor? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FBSMotor().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct FBSObserver : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSObserver GetRootAsFBSObserver(ByteBuffer _bb) { return GetRootAsFBSObserver(_bb, new FBSObserver()); }
  public static FBSObserver GetRootAsFBSObserver(ByteBuffer _bb, FBSObserver obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSObserver __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ObserverName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetObserverNameBytes() { return __p.__vector_as_arraysegment(4); }
  public Neodroid.FBS.FBSObserverData ObservationType { get { int o = __p.__offset(6); return o != 0 ? (Neodroid.FBS.FBSObserverData)__p.bb.Get(o + __p.bb_pos) : Neodroid.FBS.FBSObserverData.NONE; } }
  public TTable? Observation<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<FBSObserver> CreateFBSObserver(FlatBufferBuilder builder,
      StringOffset observer_nameOffset = default(StringOffset),
      Neodroid.FBS.FBSObserverData observation_type = Neodroid.FBS.FBSObserverData.NONE,
      int observationOffset = 0) {
    builder.StartObject(3);
    FBSObserver.AddObservation(builder, observationOffset);
    FBSObserver.AddObserverName(builder, observer_nameOffset);
    FBSObserver.AddObservationType(builder, observation_type);
    return FBSObserver.EndFBSObserver(builder);
  }

  public static void StartFBSObserver(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddObserverName(FlatBufferBuilder builder, StringOffset observerNameOffset) { builder.AddOffset(0, observerNameOffset.Value, 0); }
  public static void AddObservationType(FlatBufferBuilder builder, Neodroid.FBS.FBSObserverData observationType) { builder.AddByte(1, (byte)observationType, 0); }
  public static void AddObservation(FlatBufferBuilder builder, int observationOffset) { builder.AddOffset(2, observationOffset, 0); }
  public static Offset<FBSObserver> EndFBSObserver(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // observer_name
    return new Offset<FBSObserver>(o);
  }

  public static VectorOffset CreateSortedVectorOfFBSObserver(FlatBufferBuilder builder, Offset<FBSObserver>[] offsets) {
    Array.Sort(offsets, (Offset<FBSObserver> o1, Offset<FBSObserver> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FBSObserver? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FBSObserver().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
