// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Neodroid.FBS
{

using global::System;
using global::FlatBuffers;

public struct FBSVector3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSVector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double X { get { return __p.bb.GetDouble(__p.bb_pos + 0); } }
  public double Y { get { return __p.bb.GetDouble(__p.bb_pos + 8); } }
  public double Z { get { return __p.bb.GetDouble(__p.bb_pos + 16); } }

  public static Offset<FBSVector3> CreateFBSVector3(FlatBufferBuilder builder, double X, double Y, double Z) {
    builder.Prep(8, 24);
    builder.PutDouble(Z);
    builder.PutDouble(Y);
    builder.PutDouble(X);
    return new Offset<FBSVector3>(builder.Offset);
  }
};

public struct FBSQuaternion : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSQuaternion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double X { get { return __p.bb.GetDouble(__p.bb_pos + 0); } }
  public double Y { get { return __p.bb.GetDouble(__p.bb_pos + 8); } }
  public double Z { get { return __p.bb.GetDouble(__p.bb_pos + 16); } }
  public double W { get { return __p.bb.GetDouble(__p.bb_pos + 24); } }

  public static Offset<FBSQuaternion> CreateFBSQuaternion(FlatBufferBuilder builder, double X, double Y, double Z, double W) {
    builder.Prep(8, 32);
    builder.PutDouble(W);
    builder.PutDouble(Z);
    builder.PutDouble(Y);
    builder.PutDouble(X);
    return new Offset<FBSQuaternion>(builder.Offset);
  }
};

public struct FBSQuaternionTransform : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSQuaternionTransform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FBSVector3 Position { get { return (new FBSVector3()).__assign(__p.bb_pos + 0, __p.bb); } }
  public FBSQuaternion Rotation { get { return (new FBSQuaternion()).__assign(__p.bb_pos + 24, __p.bb); } }

  public static Offset<FBSQuaternionTransform> CreateFBSQuaternionTransform(FlatBufferBuilder builder, double position_X, double position_Y, double position_Z, double rotation_X, double rotation_Y, double rotation_Z, double rotation_W) {
    builder.Prep(8, 56);
    builder.Prep(8, 32);
    builder.PutDouble(rotation_W);
    builder.PutDouble(rotation_Z);
    builder.PutDouble(rotation_Y);
    builder.PutDouble(rotation_X);
    builder.Prep(8, 24);
    builder.PutDouble(position_Z);
    builder.PutDouble(position_Y);
    builder.PutDouble(position_X);
    return new Offset<FBSQuaternionTransform>(builder.Offset);
  }
};

public struct FBSBody : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSBody __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FBSVector3 Velocity { get { return (new FBSVector3()).__assign(__p.bb_pos + 0, __p.bb); } }
  public FBSVector3 AngularVelocity { get { return (new FBSVector3()).__assign(__p.bb_pos + 24, __p.bb); } }

  public static Offset<FBSBody> CreateFBSBody(FlatBufferBuilder builder, double velocity_X, double velocity_Y, double velocity_Z, double angular_velocity_X, double angular_velocity_Y, double angular_velocity_Z) {
    builder.Prep(8, 48);
    builder.Prep(8, 24);
    builder.PutDouble(angular_velocity_Z);
    builder.PutDouble(angular_velocity_Y);
    builder.PutDouble(angular_velocity_X);
    builder.Prep(8, 24);
    builder.PutDouble(velocity_Z);
    builder.PutDouble(velocity_Y);
    builder.PutDouble(velocity_X);
    return new Offset<FBSBody>(builder.Offset);
  }
};


}
