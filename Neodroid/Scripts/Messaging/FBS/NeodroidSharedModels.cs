// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Neodroid.FBS
{

using global::System;
using global::FlatBuffers;

public struct FBSUnobservables : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSUnobservables GetRootAsFBSUnobservables(ByteBuffer _bb) { return GetRootAsFBSUnobservables(_bb, new FBSUnobservables()); }
  public static FBSUnobservables GetRootAsFBSUnobservables(ByteBuffer _bb, FBSUnobservables obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSUnobservables __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FBSQuaternionTransform? Poses(int j) { int o = __p.__offset(4); return o != 0 ? (FBSQuaternionTransform?)(new FBSQuaternionTransform()).__assign(__p.__vector(o) + j * 56, __p.bb) : null; }
  public int PosesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FBSBody? Bodies(int j) { int o = __p.__offset(6); return o != 0 ? (FBSBody?)(new FBSBody()).__assign(__p.__vector(o) + j * 48, __p.bb) : null; }
  public int BodiesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FBSUnobservables> CreateFBSUnobservables(FlatBufferBuilder builder,
      VectorOffset posesOffset = default(VectorOffset),
      VectorOffset bodiesOffset = default(VectorOffset)) {
    builder.StartObject(2);
    FBSUnobservables.AddBodies(builder, bodiesOffset);
    FBSUnobservables.AddPoses(builder, posesOffset);
    return FBSUnobservables.EndFBSUnobservables(builder);
  }

  public static void StartFBSUnobservables(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddPoses(FlatBufferBuilder builder, VectorOffset posesOffset) { builder.AddOffset(0, posesOffset.Value, 0); }
  public static void StartPosesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(56, numElems, 8); }
  public static void AddBodies(FlatBufferBuilder builder, VectorOffset bodiesOffset) { builder.AddOffset(1, bodiesOffset.Value, 0); }
  public static void StartBodiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(48, numElems, 8); }
  public static Offset<FBSUnobservables> EndFBSUnobservables(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FBSUnobservables>(o);
  }
};

public struct FBSVector3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSVector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double X { get { return __p.bb.GetDouble(__p.bb_pos + 0); } }
  public double Y { get { return __p.bb.GetDouble(__p.bb_pos + 8); } }
  public double Z { get { return __p.bb.GetDouble(__p.bb_pos + 16); } }

  public static Offset<FBSVector3> CreateFBSVector3(FlatBufferBuilder builder, double X, double Y, double Z) {
    builder.Prep(8, 24);
    builder.PutDouble(Z);
    builder.PutDouble(Y);
    builder.PutDouble(X);
    return new Offset<FBSVector3>(builder.Offset);
  }
};

public struct FBSQuaternion : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSQuaternion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double X { get { return __p.bb.GetDouble(__p.bb_pos + 0); } }
  public double Y { get { return __p.bb.GetDouble(__p.bb_pos + 8); } }
  public double Z { get { return __p.bb.GetDouble(__p.bb_pos + 16); } }
  public double W { get { return __p.bb.GetDouble(__p.bb_pos + 24); } }

  public static Offset<FBSQuaternion> CreateFBSQuaternion(FlatBufferBuilder builder, double X, double Y, double Z, double W) {
    builder.Prep(8, 32);
    builder.PutDouble(W);
    builder.PutDouble(Z);
    builder.PutDouble(Y);
    builder.PutDouble(X);
    return new Offset<FBSQuaternion>(builder.Offset);
  }
};

public struct FBSQuaternionTransform : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSQuaternionTransform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FBSVector3 Position { get { return (new FBSVector3()).__assign(__p.bb_pos + 0, __p.bb); } }
  public FBSQuaternion Rotation { get { return (new FBSQuaternion()).__assign(__p.bb_pos + 24, __p.bb); } }

  public static Offset<FBSQuaternionTransform> CreateFBSQuaternionTransform(FlatBufferBuilder builder, double position_X, double position_Y, double position_Z, double rotation_X, double rotation_Y, double rotation_Z, double rotation_W) {
    builder.Prep(8, 56);
    builder.Prep(8, 32);
    builder.PutDouble(rotation_W);
    builder.PutDouble(rotation_Z);
    builder.PutDouble(rotation_Y);
    builder.PutDouble(rotation_X);
    builder.Prep(8, 24);
    builder.PutDouble(position_Z);
    builder.PutDouble(position_Y);
    builder.PutDouble(position_X);
    return new Offset<FBSQuaternionTransform>(builder.Offset);
  }
};

public struct FBSBody : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSBody __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FBSVector3 Velocity { get { return (new FBSVector3()).__assign(__p.bb_pos + 0, __p.bb); } }
  public FBSVector3 AngularVelocity { get { return (new FBSVector3()).__assign(__p.bb_pos + 24, __p.bb); } }

  public static Offset<FBSBody> CreateFBSBody(FlatBufferBuilder builder, double velocity_X, double velocity_Y, double velocity_Z, double angular_velocity_X, double angular_velocity_Y, double angular_velocity_Z) {
    builder.Prep(8, 48);
    builder.Prep(8, 24);
    builder.PutDouble(angular_velocity_Z);
    builder.PutDouble(angular_velocity_Y);
    builder.PutDouble(angular_velocity_X);
    builder.Prep(8, 24);
    builder.PutDouble(velocity_Z);
    builder.PutDouble(velocity_Y);
    builder.PutDouble(velocity_X);
    return new Offset<FBSBody>(builder.Offset);
  }
};


}
