// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Neodroid.FBS.Reaction
{

using global::System;
using global::FlatBuffers;

public struct FBSReaction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSReaction GetRootAsFBSReaction(ByteBuffer _bb) { return GetRootAsFBSReaction(_bb, new FBSReaction()); }
  public static FBSReaction GetRootAsFBSReaction(ByteBuffer _bb, FBSReaction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool FBSReactionBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "REAC"); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSReaction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EnvironmentName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetEnvironmentNameBytes() { return __p.__vector_as_arraysegment(4); }
  public FBSReactionParameters? Parameters { get { int o = __p.__offset(6); return o != 0 ? (FBSReactionParameters?)(new FBSReactionParameters()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Neodroid.FBS.FBSQuaternionTransform? Poses(int j) { int o = __p.__offset(8); return o != 0 ? (Neodroid.FBS.FBSQuaternionTransform?)(new Neodroid.FBS.FBSQuaternionTransform()).__assign(__p.__vector(o) + j * 56, __p.bb) : null; }
  public int PosesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Neodroid.FBS.FBSBody? Bodies(int j) { int o = __p.__offset(10); return o != 0 ? (Neodroid.FBS.FBSBody?)(new Neodroid.FBS.FBSBody()).__assign(__p.__vector(o) + j * 48, __p.bb) : null; }
  public int BodiesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FBSConfiguration? Configurations(int j) { int o = __p.__offset(12); return o != 0 ? (FBSConfiguration?)(new FBSConfiguration()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConfigurationsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FBSConfiguration? ConfigurationsByKey(string key) { int o = __p.__offset(12); return o != 0 ? FBSConfiguration.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public FBSMotion? Motions(int j) { int o = __p.__offset(14); return o != 0 ? (FBSMotion?)(new FBSMotion()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MotionsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FBSMotion? MotionsByKey(string key) { int o = __p.__offset(14); return o != 0 ? FBSMotion.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static void StartFBSReaction(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddEnvironmentName(FlatBufferBuilder builder, StringOffset environmentNameOffset) { builder.AddOffset(0, environmentNameOffset.Value, 0); }
  public static void AddParameters(FlatBufferBuilder builder, Offset<FBSReactionParameters> parametersOffset) { builder.AddStruct(1, parametersOffset.Value, 0); }
  public static void AddPoses(FlatBufferBuilder builder, VectorOffset posesOffset) { builder.AddOffset(2, posesOffset.Value, 0); }
  public static void StartPosesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(56, numElems, 8); }
  public static void AddBodies(FlatBufferBuilder builder, VectorOffset bodiesOffset) { builder.AddOffset(3, bodiesOffset.Value, 0); }
  public static void StartBodiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(48, numElems, 8); }
  public static void AddConfigurations(FlatBufferBuilder builder, VectorOffset configurationsOffset) { builder.AddOffset(4, configurationsOffset.Value, 0); }
  public static VectorOffset CreateConfigurationsVector(FlatBufferBuilder builder, Offset<FBSConfiguration>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartConfigurationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMotions(FlatBufferBuilder builder, VectorOffset motionsOffset) { builder.AddOffset(5, motionsOffset.Value, 0); }
  public static VectorOffset CreateMotionsVector(FlatBufferBuilder builder, Offset<FBSMotion>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMotionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FBSReaction> EndFBSReaction(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // environment_name
    builder.Required(o, 6);  // parameters
    return new Offset<FBSReaction>(o);
  }
  public static void FinishFBSReactionBuffer(FlatBufferBuilder builder, Offset<FBSReaction> offset) { builder.Finish(offset.Value, "REAC"); }

  public static VectorOffset CreateSortedVectorOfFBSReaction(FlatBufferBuilder builder, Offset<FBSReaction>[] offsets) {
    Array.Sort(offsets, (Offset<FBSReaction> o1, Offset<FBSReaction> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FBSReaction? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FBSReaction().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct FBSReactionParameters : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSReactionParameters __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Interruptible { get { return 0!=__p.bb.Get(__p.bb_pos + 0); } }
  public bool Step { get { return 0!=__p.bb.Get(__p.bb_pos + 1); } }
  public bool Reset { get { return 0!=__p.bb.Get(__p.bb_pos + 2); } }
  public bool Configure { get { return 0!=__p.bb.Get(__p.bb_pos + 3); } }
  public bool Describe { get { return 0!=__p.bb.Get(__p.bb_pos + 4); } }

  public static Offset<FBSReactionParameters> CreateFBSReactionParameters(FlatBufferBuilder builder, bool Interruptible, bool Step, bool Reset, bool Configure, bool Describe) {
    builder.Prep(1, 5);
    builder.PutBool(Describe);
    builder.PutBool(Configure);
    builder.PutBool(Reset);
    builder.PutBool(Step);
    builder.PutBool(Interruptible);
    return new Offset<FBSReactionParameters>(builder.Offset);
  }
};

public struct FBSMotion : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSMotion GetRootAsFBSMotion(ByteBuffer _bb) { return GetRootAsFBSMotion(_bb, new FBSMotion()); }
  public static FBSMotion GetRootAsFBSMotion(ByteBuffer _bb, FBSMotion obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSMotion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ActorName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetActorNameBytes() { return __p.__vector_as_arraysegment(4); }
  public string MotorName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetMotorNameBytes() { return __p.__vector_as_arraysegment(6); }
  public double Strength { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<FBSMotion> CreateFBSMotion(FlatBufferBuilder builder,
      StringOffset actor_nameOffset = default(StringOffset),
      StringOffset motor_nameOffset = default(StringOffset),
      double strength = 0.0) {
    builder.StartObject(3);
    FBSMotion.AddStrength(builder, strength);
    FBSMotion.AddMotorName(builder, motor_nameOffset);
    FBSMotion.AddActorName(builder, actor_nameOffset);
    return FBSMotion.EndFBSMotion(builder);
  }

  public static void StartFBSMotion(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddActorName(FlatBufferBuilder builder, StringOffset actorNameOffset) { builder.AddOffset(0, actorNameOffset.Value, 0); }
  public static void AddMotorName(FlatBufferBuilder builder, StringOffset motorNameOffset) { builder.AddOffset(1, motorNameOffset.Value, 0); }
  public static void AddStrength(FlatBufferBuilder builder, double strength) { builder.AddDouble(2, strength, 0.0); }
  public static Offset<FBSMotion> EndFBSMotion(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // actor_name
    builder.Required(o, 6);  // motor_name
    return new Offset<FBSMotion>(o);
  }

  public static VectorOffset CreateSortedVectorOfFBSMotion(FlatBufferBuilder builder, Offset<FBSMotion>[] offsets) {
    Array.Sort(offsets, (Offset<FBSMotion> o1, Offset<FBSMotion> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FBSMotion? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FBSMotion().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct FBSConfiguration : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FBSConfiguration GetRootAsFBSConfiguration(ByteBuffer _bb) { return GetRootAsFBSConfiguration(_bb, new FBSConfiguration()); }
  public static FBSConfiguration GetRootAsFBSConfiguration(ByteBuffer _bb, FBSConfiguration obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FBSConfiguration __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ConfigurableName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetConfigurableNameBytes() { return __p.__vector_as_arraysegment(4); }
  public double ConfigurableValue { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<FBSConfiguration> CreateFBSConfiguration(FlatBufferBuilder builder,
      StringOffset configurable_nameOffset = default(StringOffset),
      double configurable_value = 0.0) {
    builder.StartObject(2);
    FBSConfiguration.AddConfigurableValue(builder, configurable_value);
    FBSConfiguration.AddConfigurableName(builder, configurable_nameOffset);
    return FBSConfiguration.EndFBSConfiguration(builder);
  }

  public static void StartFBSConfiguration(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddConfigurableName(FlatBufferBuilder builder, StringOffset configurableNameOffset) { builder.AddOffset(0, configurableNameOffset.Value, 0); }
  public static void AddConfigurableValue(FlatBufferBuilder builder, double configurableValue) { builder.AddDouble(1, configurableValue, 0.0); }
  public static Offset<FBSConfiguration> EndFBSConfiguration(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // configurable_name
    return new Offset<FBSConfiguration>(o);
  }

  public static VectorOffset CreateSortedVectorOfFBSConfiguration(FlatBufferBuilder builder, Offset<FBSConfiguration>[] offsets) {
    Array.Sort(offsets, (Offset<FBSConfiguration> o1, Offset<FBSConfiguration> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FBSConfiguration? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FBSConfiguration().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
